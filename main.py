import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import executor
from aiocryptopay import AioCryptoPay, Networks
import aiosqlite
import config
import random 
import string





logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)

cryptopay = AioCryptoPay(config.CRYPTO_TOKEN, network=Networks.MAIN_NET)

async def add_bet(user_id):
    async with aiosqlite.connect('db.db') as db:
        async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                bets = row[1] + 1
                await db.execute("UPDATE users SET bets = ? WHERE user_id = ?", (bets, user_id))
                await db.commit()
            else:
                await db.execute("INSERT INTO users (user_id, bets, viplat) VALUES (?, 1, 0)", (user_id,))
                await db.commit()

async def add_viplata(amount, user_id):
    async with aiosqlite.connect('db.db') as db:
        async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                viplat = float(row[2]) + amount
                await db.execute("UPDATE users SET viplat = ? WHERE user_id = ?", (viplat, user_id))
                await db.commit()
            else:
                await db.execute("INSERT INTO users (user_id, bets, viplat) VALUES (?, 0, amount)", (user_id, amount))
                await db.commit()
                
async def pay_money(amount, id):
    try:
        payme = await cryptopay.create_check(asset='USDT', amount=amount)
        keyboard = types.InlineKeyboardMarkup()
        prize = types.InlineKeyboardButton(text="üéÅ", url=payme.bot_check_url)
        keyboard.add(prize)
     
        await bot.send_message(id, f'<b>[üí∏] –í—ã–ø–ª–∞—Ç–∞:\n</b>\n<blockquote><b>–°—É–º–º–∞: {amount}$</b></blockquote>', reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(id, f'<b>[‚õî] –û—à–∏–±–∫–∞...</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å <b>{amount}</b>!\n–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤—ã–ø–ª–∞—Ç–æ–π')
        for admid in config.ADMIN_IDS:
            await bot.send_message(admid, f"<b>–ê–õ–ï –ù–ê–•–£–ô!</b>\n–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É!\n\n–Æ–∑–µ—Ä: {id}\n–°—É–º–º–∞: {amount}\n\n–õ–æ–≥ –æ—à–∏–±–∫–∏: <b>{e}</b>")
    		

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    stavka_button = types.InlineKeyboardButton(text="üé≤ | –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=config.pinned_link)
    kanal_button = types.InlineKeyboardButton(text="üéÅ | –ö–∞–Ω–∞–ª", url="https://t.me/DoxBet_casino")
    stats_button = types.InlineKeyboardButton(text="üìä | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='my_stats')
    keyboard.add(stavka_button)
    keyboard.add(kanal_button)
    keyboard.add(stats_button)
    await message.reply("[üëã] <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –æ—Å–Ω–æ–≤–∞–Ω—É—é –Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ CryptoBot</b>\n\n<blockquote>–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É!</blockquote>", reply_markup=keyboard)
    
@dp.callback_query_handler(lambda query: query.data == 'my_stats')
async def statistics(query: types.InlineQuery):
    user_id = query.from_user.id
    async with aiosqlite.connect('db.db') as db:
        async with db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                user_id = row[0]
                bets = row[1]
                viplat = row[2]
                message = f'''
<b>[üìä] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{query.from_user.username}</b>

<blockquote>üí≤ | –°—Ç–∞–≤–æ–∫: <b>{bets}</b>
üí∏ | –í—ã–ø–ª–∞—Ç –Ω–∞ —Å—É–º–º—É: <b>{viplat} $</b></blockquote>
'''
                await bot.send_message(user_id, message)
            else:
                await db.execute("INSERT INTO users (user_id, bets, viplat) VALUES (?, 0, 0)", (user_id,))
                message = f'''
<b>[üìä] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{query.from_user.username}</b>

<blockquote>üí≤ | –°—Ç–∞–≤–æ–∫: <b>0</b>
üí∏ | –í—ã–ø–ª–∞—Ç –Ω–∞ —Å—É–º–º—É: <b>0 $</b></blockquote>
'''
                await bot.send_message(user_id, message)

@dp.channel_post_handler(chat_id=config.PAY_ID)
async def handle_new_bet(message: types.Message):
    try:
        bet_usd = float(message.text.split("($")[1].split(").")[0])
        bet_coment = message.text.split("üí¨ ")[1]
        bet_comment = bet_coment.lower()
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        user = message.entities[0].user
        player_id = user.id
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="üé≤ | –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=config.pinned_link)
        await add_bet(player_id)
        keyboard.add(url_button)
        bet_design = config.bet.format(bet_usd=bet_usd, player_name=player_name, bet_comment=bet_comment)
        await bot.send_message(config.MAIN_ID, bet_design, reply_markup=keyboard)
        if bet_comment.startswith("–∫—É–±"):
            if bet_comment in config.ag_dice:
                await handle_dice(message, bet_usd, bet_comment, player_id)
            elif bet_comment.startswith("—Ñ—É—Ç–±–æ–ª"):
                if bet_comment in config.ag_foot:
                    await handle_football(message, bet_usd, bet_comment, player_id)
            elif bet_comment.startswith("–±–∞—Å–∫–µ—Ç"):
                if bet_comment in config.ag_basket:
                    await handle_foot(message, bet_usd, bet_comment, player_id)
            else:
                await bot.send_message(config.MAIN_ID, "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå |–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b></blockquote>")
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå |–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b></blockquote>")
    except IndexError:
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        await bot.send_message(config.MAIN_ID, f"<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote><b>–ò–≥—Ä–æ–∫ {player_name} –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n–ù–∞–ø–∏—à–∏ –≤ –¢–ü –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!</b></blockquote>")
    except AttributeError as e:
        player_name = message.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0].strip()
        await bot.send_message(config.MAIN_ID, f"<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote><b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ {player_name}!\n–ù–∞–ø–∏—à–∏ –≤ –¢–ü –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞, –∏ –∑–∞–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏! –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ —É –≤–∞—Å –≤—ã–∫–ª—é—á–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞!</b></blockquote>")
    except Exception as e:
        await bot.send_message(config.MAIN_ID, "<b>[‚õî] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏!</b>")
        for admid in config.ADMIN_IDS:
            await bot.send_message(admid, f"–ê–õ–¨–û–£\n\n{e}\n—Ñ–∏–∫—Å–∏ —Å—É–∫–∞")

async def handle_dice(message, bet_usd, bet_comment, player_id):
    dice_value = await bot.send_dice(chat_id=config.MAIN_ID)
    dice_value = dice_value.dice.value

    bet_type = bet_comment.split(" ")[1].lower()

    if bet_type == "–º–µ–Ω—å—à–µ":
        if dice_value in [1, 2, 3]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type == "–±–æ–ª—å—à–µ":
        if dice_value in [4, 5, 6]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["—á–µ—Ç", "—á–µ—Ç–Ω–æ–µ", "—á—ë—Ç"]:
        if dice_value in [2, 4, 6]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["–Ω–µ—á–µ—Ç", "–Ω–µ—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç–Ω–æ–µ"]:
        if dice_value in [1, 3, 5]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    else:
        await bot.send_message(config.MAIN_ID, "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå |–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b></blockquote>")

async def handle_foot(message, bet_usd, bet_comment, player_id):
    footemoji = await bot.send_dice(chat_id=config.MAIN_ID, emoji="‚öΩ")
    foot_value = dice_value.dice.value

    bet_type = bet_comment.split(" ")[1].lower()

    if bet_type in ['–≥–æ–ª', '–≥–æ–ª–ª']:
        if foot_value in [4, 5, 6]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["–Ω–µ –≥–æ–ª", "–Ω–µ –≥–æ–ª–ª"]:
        if dice_value in [1, 2, 3]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    else:
        await bot.send_message(config.MAIN_ID, "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå |–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b></blockquote>")

async def handle_basket(message, bet_usd, bet_comment, player_id):
    footemoji = await bot.send_dice(chat_id=config.MAIN_ID, emoji="üèÄ")
    foot_value = dice_value.dice.value

    bet_type = bet_comment.split(" ")[1].lower()

    if bet_type in ['–∑–∞–±—å–µ—Ç', '–∑–∞–±—å—ë—Ç']:
        if foot_value in [4, 5, 6]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    elif bet_type in ["–Ω–µ –∑–∞–±—å–µ—Ç", "–Ω–µ –∑–∞–±—å—ë—Ç"]:
        if dice_value in [1, 2, 3]:
            win_amount = bet_usd * config.cef
            await handle_win(player_id, win_amount)
        else:
            await bot.send_message(config.MAIN_ID, "<blockquote><b>‚ùå | –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote>")
    else:
        await bot.send_message(config.MAIN_ID, "<blockquote><b>üí¨ | –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–≥—Ä—É!\n\nüìå |–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @KrasnovWork –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b></blockquote>")

async def handle_win(user_id, win_amountt):
    win_amount = round(win_amountt, 2)
    msga = f'''
<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!</b>

<blockquote>–ó–∞–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!</blockquote>
'''
    try:
        check = await cryptopay.create_check(asset='USDT', amount=win_amount, pin_to_user_id=user_id)
        keyboard = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å", url=check.bot_check_url)
        keyboard.add(btn1)
        await bot.send_message(config.MAIN_ID, msga, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(config.MAIN_ID, f"<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!</b>\n<blockquote>–ù–æ –≤ –∫–∞–∑–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã. –û–Ω–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.</blockquote>")
        for admid in config.ADMIN_IDS:
            await bot.send_message(admid, f"<b>–ê–õ–û–û–û–û –°–£–ö–ê ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è</b>\n–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É!\n\n–Æ–∑–µ—Ä: {user_id}\n–°—É–º–º–∞: {win_amount}\n\n–õ–æ–≥ –æ—à–∏–±–∫–∏: <b>{e}</b>")

@dp.message_handler(commands=['create_invoice'])
async def create_invoice(message: types.Message):
    try:
        amount = float(message.text.split()[1])
        invoice = await cryptopay.create_invoice(asset='USDT', amount=amount)
        await message.reply(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã:\n{invoice.bot_invoice_url}")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /create_invoice <—Å—É–º–º–∞>")
        
@dp.message_handler(commands=['del_checks'])
async def delete_all_invoices(message: types.Message):
    checks = await cryptopay.get_checks(status='active')
    await message.reply(checks)
    
@dp.message_handler(commands=['pay_money'])
async def cmd_paymoney(message: types.Message):
    if message.from_user.id in config.ADMIN_IDS:
        amount = float(message.text.split(" ")[2])
        id = int(message.text.split(" ")[1])
        await pay_money(amount, id)
        await message.reply("–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã")
    else:
        await message.reply("<b>[‚õî] –û—à–∏–±–∫–∞!</b>\n\n<blockquote>–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</blockquote>")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)